2013-10-02: gocc3 RC 1
======================

This version of gocc has a number of new features:

1. Optional and repeated syntax expressions replace â„‡-productions. See the grammar: gocc3.bnf.

2. Gocc3 is fully generated by gocc2: both lexer and parser.

3. Several semantic checks have been implemented.

4. By default gocc3 generates a reduced space LR(1) state machine using the beautiful pratical general method (PGM) by David Pager.
	
		See: A Practical General Method for Constructing LR(k) Parsers. David Pager. Acta Informatica 7, 249-268, 1977

   gocc3 will still generate a Knuth LR(1) state machine if the -knuth option is used. PGM state machines can reduce the state space of 
   the parser to less than 10% of the equivalent Knuth machine without introducing new LR(1) conflicts. The typical PGM machine is of 
   the same size as an LALR(1) machine for the same grammar.

Enjoy!


2013-09-02: gocc2 first commit.
===============================

This version of gocc generated both parsers and lexers from a common EBNF file. See examples for format of BNF files. Documention update is under way.

This version of gocc still uses a handwritten scanner, but its parser was generated by gocc1.